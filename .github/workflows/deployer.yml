name: Deploy New Upstream Patch Release to Vercel (Webhook Triggered)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'The upstream release tag from webhook'
        required: true
        type: string
      release_name:
        description: 'The name of the upstream release (from webhook)'
        required: false
        type: string
      release_url:
        description: 'The URL to the upstream release notes (from webhook)'
        required: false
        type: string
      upstream_event_timestamp: 
        description: 'Webhook event timestamp (ms) from webhook processor'
        required: true 
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Checkout repository (dydxopsdao/v4-web)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

      - name: Configure GPG for Git
        run: |
          git config --global user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          git config --global commit.gpgSign true
          git config --global user.name "GitHub Actions"
          git config --global user.email "196231098+hedgie-svc@users.noreply.github.com"

      - name: Set Upstream Release Info from Webhook Input
        id: set_upstream_info
        run: |
          echo "Webhook triggered. Received release_tag: ${{ github.event.inputs.release_tag }}"
          FULL_RELEASE_TAG="${{ github.event.inputs.release_tag }}"

          if [[ ! "${FULL_RELEASE_TAG}" =~ ^release/v ]]; then
            echo "Error: Webhook provided release_tag '${FULL_RELEASE_TAG}' is not in the expected 'release/vX.Y.Z' format."
            exit 1
          fi
          echo "LATEST_TAG=${FULL_RELEASE_TAG}" >> $GITHUB_ENV
          LATEST_VERSION_SHELL_VAR="${FULL_RELEASE_TAG#release/v}"
          echo "LATEST_VERSION=${LATEST_VERSION_SHELL_VAR}" >> $GITHUB_ENV
          
      - name: Identify current production release (from dydxopsdao/v4-web)
        id: get_production_info
        run: |
          git remote set-url origin git@github.com:dydxopsdao/v4-web.git
          git fetch origin --tags

          PRODUCTION_TAG_FROM_GIT=$(git tag --merged origin/main --sort=-v:refname | grep '^release/v' | head -n 1)
          echo "Latest production tag on main (dydxopsdao/v4-web): ${PRODUCTION_TAG_FROM_GIT:-None found}"

          if [ -z "$PRODUCTION_TAG_FROM_GIT" ]; then
            echo "Error: No production tags (release/v*) found on main branch of dydxopsdao/v4-web. Cannot determine patch."
            exit 1 
          fi
          echo "PRODUCTION_TAG=${PRODUCTION_TAG_FROM_GIT}" >> $GITHUB_ENV
          PRODUCTION_VERSION_SHELL_VAR="${PRODUCTION_TAG_FROM_GIT#release/v}"
          echo "PRODUCTION_VERSION=${PRODUCTION_VERSION_SHELL_VAR}" >> $GITHUB_ENV

      - name: Determine if New Version is a Deployable Patch
        id: version_check
        run: |
          echo "Current Production: ${{ env.PRODUCTION_TAG }} (Version: ${{ env.PRODUCTION_VERSION }})"
          echo "Incoming Upstream: ${{ env.LATEST_TAG }} (Version: ${{ env.LATEST_VERSION }})"

          IFS='.' read -r PROD_MAJOR PROD_MINOR PROD_PATCH <<< "${{ env.PRODUCTION_VERSION }}"
          IFS='.' read -r UPSTREAM_MAJOR UPSTREAM_MINOR UPSTREAM_PATCH <<< "${{ env.LATEST_VERSION }}"

          if [[ "$UPSTREAM_MAJOR" -eq "$PROD_MAJOR" && \
                "$UPSTREAM_MINOR" -eq "$PROD_MINOR" && \
                "$UPSTREAM_PATCH" -gt "$PROD_PATCH" ]]; then
            echo "Decision: New PATCH version detected (${{ env.LATEST_TAG }}). Proceeding to deploy."
            echo "::set-output name=is_deployable_patch::true"
          else
            echo "Decision: Version ${{ env.LATEST_TAG }} is NOT a direct patch update to production ${{ env.PRODUCTION_TAG }}. No automatic deployment."
            echo "::set-output name=is_deployable_patch::false"
          fi

      - name: Fetch Upstream Data from dydxprotocol/v4-web (if deploying patch)
        if: steps.version_check.outputs.is_deployable_patch == 'true'
        run: |
          git remote add upstream_protocol git@github.com:dydxprotocol/v4-web.git || echo "Remote 'upstream_protocol' already exists."
          echo "Fetching data from upstream_protocol (dydxprotocol/v4-web) for tag ${{ env.LATEST_TAG }}..."
          if ! git fetch upstream_protocol --force --tags; then
             echo "Error: Failed to fetch tags from upstream_protocol (dydxprotocol/v4-web)."
             exit 1
          fi
          if ! git fetch upstream_protocol; then # Fetch branches to get commit history
             echo "Error: Failed to fetch branches from upstream_protocol (dydxprotocol/v4-web)."
             exit 1
          fi
          
          if ! git rev-parse --verify ${{ env.LATEST_TAG }}^{commit} > /dev/null 2>&1; then
            echo "Error: Tag ${{ env.LATEST_TAG }} (from dydxprotocol/v4-web) not found locally or does not point to a commit after fetch."
            exit 1
          fi
          echo "Tag ${{ env.LATEST_TAG }} is available for rebase."

      - name: Branch Test Safety - Skip Actual Git Push
        if: steps.version_check.outputs.is_deployable_patch == 'true' && github.ref_name != 'main'
        run: |
          echo "BRANCH TEST SAFETY: Running on non-main branch ('${{ github.ref_name }}'). Actual Git push operations will be SKIPPED."
          echo "::set-output name=branch_test_skip_push::true"
        id: branch_test_safety

      - name: Create new release branch (dos-<version>)
        if: steps.version_check.outputs.is_deployable_patch == 'true' && steps.branch_test_safety.outputs.branch_test_skip_push != 'true'
        run: |
          echo "Creating branch dos-${{ env.LATEST_VERSION }}, rebasing onto ${{ env.LATEST_TAG }}, and pushing..."
          git checkout -b dos-${{ env.LATEST_VERSION }} origin/main
          git rebase ${{ env.LATEST_TAG }} 
          git push --set-upstream origin dos-${{ env.LATEST_VERSION }}

      - name: Reset main to the new release branch
        if: steps.version_check.outputs.is_deployable_patch == 'true' && steps.branch_test_safety.outputs.branch_test_skip_push != 'true'
        run: |
          echo "Resetting 'main' to 'origin/dos-${{ env.LATEST_VERSION }}' and force pushing..."
          git checkout main
          git reset --hard origin/dos-${{ env.LATEST_VERSION }}
          sleep 5 
          git push --force origin main

      - name: Final Log
        if: always() 
        run: |
          echo "Workflow finished."
          echo "  Is deployable patch: ${{ steps.version_check.outputs.is_deployable_patch || 'false' }}"
          echo "  Branch test skip push active: ${{ steps.branch_test_safety.outputs.branch_test_skip_push || 'false' }}"
          echo "  Upstream tag processed: ${{ env.LATEST_TAG || 'N/A' }}"
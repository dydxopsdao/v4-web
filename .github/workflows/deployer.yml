name: Deploy new upstream release to Vercel
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Upstream release tag from webhook (e.g., release/vX.Y.Z)'
        required: true
        type: string
      upstream_event_timestamp:
        description: 'Webhook event timestamp (ms)'
        required: false
        type: string
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global core.sshCommand "ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

      - name: Configure GPG for Git
        run: |
          git config --global user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          git config --global commit.gpgSign true
          git config --global user.name "GitHub Actions"
          git config --global user.email "196231098+hedgie-svc@users.noreply.github.com"

      - name: Identify the latest upstream code release
        run: |
          echo "Processing webhook input for release: ${{ github.event.inputs.release_tag }}"
          FULL_RELEASE_TAG="${{ github.event.inputs.release_tag }}" # Assign to shell variable

          if [[ ! "${FULL_RELEASE_TAG}" =~ ^release/v ]]; then
            echo "Error: Invalid release_tag format: ${FULL_RELEASE_TAG}. Expected 'release/vX.Y.Z'."
            exit 1
          fi

          # Set LATEST_TAG env var
          echo "LATEST_TAG=${FULL_RELEASE_TAG}" >> $GITHUB_ENV

          LATEST_VERSION_SHELL_VAR="${FULL_RELEASE_TAG#release/v}"
          echo "LATEST_VERSION=${LATEST_VERSION_SHELL_VAR}" >> $GITHUB_ENV

      - name: Identify the latest production release
        run: |
          git fetch origin main
          git checkout main 
          git pull origin main
          PRODUCTION_TAG=$(git tag --merged HEAD --sort=-v:refname | grep '^release/v' | head -n 1)
          echo "Latest production tag (release/v*) on main branch: ${PRODUCTION_TAG:-None found}"
          if [ -z "$PRODUCTION_TAG" ]; then
              echo "Error: No 'release/v*' tags found on main branch. Cannot determine current production version."
              exit 1
          fi
          echo "PRODUCTION_TAG=${PRODUCTION_TAG}" >> $GITHUB_ENV
          echo "PRODUCTION_VERSION=${PRODUCTION_TAG#release/v}" >> $GITHUB_ENV

      - name: Determine version type
        run: |
          echo "Checking if the version is a patch, minor, or major"
          IFS='.' read -r PROD_MAJOR PROD_MINOR PROD_PATCH <<< "${{ env.PRODUCTION_VERSION }}"
          IFS='.' read -r UPSTREAM_MAJOR UPSTREAM_MINOR UPSTREAM_PATCH <<< "${{ env.LATEST_VERSION }}"
          echo "Production Version - Major: $PROD_MAJOR, Minor: $PROD_MINOR, Patch: $PROD_PATCH (${{ env.PRODUCTION_TAG }})"
          echo "Latest Version - Major: $UPSTREAM_MAJOR, Minor: $UPSTREAM_MINOR, Patch: $UPSTREAM_PATCH (${{ env.LATEST_TAG }})"
          if [ "$UPSTREAM_MAJOR" -eq "$PROD_MAJOR" ] && [ "$UPSTREAM_MINOR" -eq "$PROD_MINOR" ] && [ "$UPSTREAM_PATCH" -gt "$PROD_PATCH" ]; then
              echo "New patch version detected: ${{ env.LATEST_TAG }}"
              echo "NEW_PATCH_VERSION=true" >> $GITHUB_ENV
          else
              echo "No new patch version detected for automated deployment (not a direct patch)."
              echo "NEW_PATCH_VERSION=false" >> $GITHUB_ENV
              exit 0
          fi

      - name: Fetch Upstream Tag Data for Rebase
        if: env.NEW_PATCH_VERSION == 'true'
        run: |
          echo "Fetching data for upstream tag ${{ env.LATEST_TAG }} from dydxprotocol/v4-web..."
          git remote add upstream git@github.com:dydxprotocol/v4-web.git || echo "Remote 'upstream' already exists."
          if ! git fetch upstream --force --tags || ! git fetch upstream; then
             echo "Error: Failed to fetch data from upstream (dydxprotocol/v4-web)."
             exit 1
          fi
          if ! git rev-parse --verify ${{ env.LATEST_TAG }}^{commit} > /dev/null 2>&1; then
            echo "Error: Upstream tag ${{ env.LATEST_TAG }} not resolvable after fetching from dydxprotocol/v4-web."
            exit 1
          fi
          echo "Upstream tag ${{ env.LATEST_TAG }} is available for rebase."

      - name: Branch Test Safety - Skip Actual Git Push
        if: env.NEW_PATCH_VERSION == 'true' && github.ref_name != 'main'
        run: |
          echo "BRANCH TEST SAFETY: Workflow running on non-main branch ('${{ github.ref_name }}'). Actual Git push operations will be SKIPPED."
          echo "::set-output name=branch_test_skip_push::true"
        id: branch_test_safety

      - name: Create a new release branch for Vercel deployment
        if: env.NEW_PATCH_VERSION == 'true' && steps.branch_test_safety.outputs.branch_test_skip_push != 'true'
        run: |
          BRANCH_NAME="dos-${{ env.LATEST_VERSION }}"
          echo "Creating branch ${BRANCH_NAME}, rebasing onto ${{ env.LATEST_TAG }}"
          git checkout -B "${BRANCH_NAME}" origin/main
          git rebase ${{ env.LATEST_TAG }}
          echo "Pushing branch ${BRANCH_NAME} to origin..."
          git push --set-upstream origin "${BRANCH_NAME}" --force

      - name: Reset main to the feature branch for production deployment
        if: env.NEW_PATCH_VERSION == 'true' && steps.branch_test_safety.outputs.branch_test_skip_push != 'true'
        run: |
          BRANCH_NAME="dos-${{ env.LATEST_VERSION }}"
          echo "Resetting main to origin/${BRANCH_NAME}"
          git checkout main
          git reset --hard "origin/${BRANCH_NAME}"
          sleep 5
          echo "Force pushing main to origin"
          git push --force origin main
          echo "Tagging main with ${{ env.LATEST_TAG }} and pushing tag to origin..."
          git tag -f "${{ env.LATEST_TAG }}" main
          git push origin "${{ env.LATEST_TAG }}" --force

      - name: Final Status Log
        if: always()
        run: |
          echo "Workflow finished. LATEST_TAG: ${{ env.LATEST_TAG }}. NEW_PATCH_VERSION: ${{ env.NEW_PATCH_VERSION }}. Branch Test Skip: ${{ steps.branch_test_safety.outputs.branch_test_skip_push }}"
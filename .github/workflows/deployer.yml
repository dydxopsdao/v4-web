name: Deploy new upstream release to Vercel

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'  # Run every 10 minutes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0  # Fetch full history

      - name: Configure Git with GitHub App
        run: |
          git config --global user.name "dos-automation-bot[bot]"
          git config --global user.email "dos-automation-bot[bot]@users.noreply.github.com"

      - name: Identify the latest upstream code release
        run: |
          # Add upstream remote using HTTPS with token
          git remote add upstream https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/dydxprotocol/v4-web.git

          # Update origin to use HTTPS with token
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/dydxopsdao/v4-web.git

          # Fetch all tags from upstream
          git fetch upstream

          # Get the latest release tag
          LATEST_TAG=$(git tag -l 'release/v*' | sort -V | tail -n 1)
          echo "Latest upstream tag found: ${LATEST_TAG}"

          # Check if LATEST_TAG is empty
          if [ -z "$LATEST_TAG" ]; then
              echo "No tags found matching 'release/v*'."
              exit 1
          fi

          # Export LATEST_TAG to the environment
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "LATEST_VERSION=${LATEST_TAG#release/v}" >> $GITHUB_ENV

      - name: Identify the latest production release
        run: |
          # Fetch all tags from the main branch
          git fetch origin main --tags

          # Get the latest tag on the main branch
          PRODUCTION_TAG=$(git tag --merged origin/main | sort -V | tail -n 1)
          echo "Latest production tag on main branch: ${PRODUCTION_TAG}"

          # Check if PRODUCTION_TAG is empty
          if [ -z "$PRODUCTION_TAG" ]; then
              echo "No production tags found on main branch."
              exit 1
          fi

          # Export PRODUCTION_TAG to the environment
          echo "PRODUCTION_TAG=${PRODUCTION_TAG}" >> $GITHUB_ENV
          echo "PRODUCTION_VERSION=${PRODUCTION_TAG#release/v}" >> $GITHUB_ENV

      - name: Determine version type
        run: |
          echo "Checking if the version is a patch, minor, or major"
          
          # Extract version numbers from environment variables
          IFS='.' read -r PROD_MAJOR PROD_MINOR PROD_PATCH <<< "${{ env.PRODUCTION_VERSION }}"
          IFS='.' read -r UPSTREAM_MAJOR UPSTREAM_MINOR UPSTREAM_PATCH <<< "${{ env.LATEST_VERSION }}"

          # Log the extracted version numbers
          echo "Production Version - Major: $PROD_MAJOR, Minor: $PROD_MINOR, Patch: $PROD_PATCH"
          echo "Latest Version - Major: $UPSTREAM_MAJOR, Minor: $UPSTREAM_MINOR, Patch: $UPSTREAM_PATCH"

          # Determine if a new patch version is detected
          if [ "$UPSTREAM_MAJOR" -eq "$PROD_MAJOR" ] && [ "$UPSTREAM_MINOR" -eq "$PROD_MINOR" ] && [ "$UPSTREAM_PATCH" -gt "$PROD_PATCH" ]; then
              echo "New patch version detected: ${LATEST_TAG}"
              echo "NEW_PATCH_VERSION=true" >> $GITHUB_ENV
          else
              echo "No new patch version detected."
              echo "NEW_PATCH_VERSION=false" >> $GITHUB_ENV
              exit 0
          fi

      - name: Create a new release branch for Vercel deployment
        if: env.NEW_PATCH_VERSION == 'true'
        run: |
          # Create a new branch from the latest release tag
          git checkout -b dos-${{ env.LATEST_VERSION }} origin/main

          # Rebase commits from the latest release tag onto the new release branch
          git rebase ${{ env.LATEST_TAG }}

          # Push the rebased branch to the remote repository
          git push --set-upstream origin dos-${{ env.LATEST_VERSION }}

      - name: Reset main to the feature branch for production deployment
        if: env.NEW_PATCH_VERSION == 'true'
        run: |
          # Checkout the main branch
          git checkout main

          # Hard reset the main branch to the feature branch
          git reset --hard origin/dos-${{ env.LATEST_VERSION }}

          # Force push the changes to the main branch
          sleep 5
          git push --force origin main
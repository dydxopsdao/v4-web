name: Deploying to preview

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
  
      - name: Configure GPG for Git
        run: |
          git config --global user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          git config --global commit.gpgSign true
          git config --global user.name "GitHub Actions"
          git config --global user.email "196231098+hedgie-svc@users.noreply.github.com"
            
      - name: Fetch upstream tags and identify the latest release
        run: |
          # Add upstream remote
          git remote add upstream https://github.com/dydxprotocol/v4-web.git

          # Fetch all tags from upstream
          git fetch upstream

          # Get the latest release tag
          LATEST_TAG=$(git tag -l 'release/v*' | sort -V | tail -n 1)
          echo "Latest upstream tag found: ${LATEST_TAG}"

          # Check if LATEST_TAG is empty
          if [ -z "$LATEST_TAG" ]; then
              echo "No tags found matching 'release/v*'."
              exit 1
          fi

          # Export LATEST_TAG to the environment
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "VERSION=${LATEST_TAG#release/v}" >> $GITHUB_ENV

      - name: Check if branch already exists and create a new one for Vercel deployment
        run: |
          if git ls-remote --heads origin refs/heads/dos-${{ env.VERSION }} | grep -q .; then
            echo "Branch dos-${{ env.VERSION }} already exists. Skipping."
            exit 0
          fi

          # Create a new branch from the latest release tag
          git checkout -b dos-${{ env.VERSION }} origin/main

          # Rebase commits from the latest release tag onto the new release branch
          git rebase ${{ env.LATEST_TAG }}

          # Push the rebased branch to the remote repository
          git push --set-upstream origin dos-${{ env.VERSION }}
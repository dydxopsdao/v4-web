name: Create Preview Branch

on:
  # Manual trigger with optional version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create branch for (e.g., 1.0.0)'
        required: false
  # Scheduled trigger
  schedule:
    - cron: '*/30 * * * *'  # Check every 30 minutes

jobs:
  create-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get full history for proper branching
          ssh-key: ${{ secrets.DEPLOY_KEY }}  # Use SSH key for fetching/pushing
          
      - name: Configure SSH for authentication and signing
        run: |
          # Save the private key from the secret
          mkdir -p ~/.ssh && echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_deploy
          
          # Extract the public key from the private key
          ssh-keygen -y -f ~/.ssh/id_deploy > ~/.ssh/id_deploy.pub

          # Configure Git to use the SSH key for signing
          git config --global gpg.format ssh
          git config --global user.signingkey ~/.ssh/id_deploy.pub
          git config user.name "GitHub Actions Bot"
          git config user.email "rudi+github-actions@dydxopsservices.com"
      
      - name: Process Release
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Add upstream remote
            git remote add upstream https://github.com/dydxprotocol/v4-web.git

            # Fetch all tags from upstream
            git fetch upstream
            
            # Get the latest release tag
            LATEST_TAG=$(git tag -l 'release/v*' | sort -V | tail -n 1)
            echo "Latest upstream tag found: ${LATEST_TAG}"

            # Check if LATEST_TAG is empty
            if [ -z "$LATEST_TAG" ]; then
                echo "No tags found matching 'release/v*'."
                exit 1
            fi
            
            VERSION=${LATEST_TAG#release/v}
          fi
          
          # Check if branch already exists
          if git ls-remote --heads origin refs/heads/dos-$VERSION | grep -q .; then
            echo "Branch dos-$VERSION already exists. Skipping."
            exit 0
          fi
          
          # Create new branch from main and check it out
          git checkout -b dos-$VERSION origin/main
          
          # Fetch changes from upstream, replay my commits on top and re-sign
          git rebase release/v$VERSION     
          
          # Push to origin
          git push --set-upstream origin dos-$VERSION